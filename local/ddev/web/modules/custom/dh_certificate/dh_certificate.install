<?php

/**
 * @file
 * Install, update and uninstall functions for the DH Certificate module.
 */

/**
 * Implements hook_schema().
 */
function dh_certificate_schema() {
  $schema['course_enrollment'] = [
    'description' => 'Stores course enrollment data.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique enrollment ID.',
      ],
      'uid' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'User ID.',
      ],
      'course_id' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Course node ID.',
      ],
      'status' => [
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => 'pending',
        'description' => 'Enrollment status.',
      ],
      'completed_date' => [
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'Timestamp of completion.',
      ],
      'enrolled_date' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The Unix timestamp when the enrollment was created.',
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'uid' => ['uid'],
      'course_id' => ['course_id'],
      'status' => ['status'],
    ],
    'foreign keys' => [
      'enrolled_user' => [
        'table' => 'users',
        'columns' => ['uid' => 'uid'],
      ],
      'enrolled_course' => [
        'table' => 'node',
        'columns' => ['course_id' => 'nid'],
      ],
    ],
  ];

  return $schema;
}

/**
 * Implements hook_install().
 */
function dh_certificate_install() {
  $schema = \Drupal::database()->schema();
  $definition = dh_certificate_schema();

  try {
    if (!$schema->tableExists('course_enrollment')) {
      $schema->createTable('course_enrollment', $definition['course_enrollment']);
      // Initialize enrolled_date for new installations
      \Drupal::database()->update('course_enrollment')
        ->fields(['enrolled_date' => \Drupal::time()->getRequestTime()])
        ->execute();
    }

    // Ensure admin role has all permissions
    $admin_role = \Drupal::entityTypeManager()->getStorage('user_role')->load('administrator');
    if ($admin_role) {
      $permissions = [
        'administer dh certificate',
        'administer dh certificate settings',
        'administer dh certificate requirements',
        'administer dh certificate courses',
        'view certificate progress',
        'view own certificate progress',
      ];
      foreach ($permissions as $permission) {
        $admin_role->grantPermission($permission);
      }
      $admin_role->save();
      \Drupal::logger('dh_certificate')->notice('Added DH Certificate permissions to administrator role');
    }
  }
  catch (\Exception $e) {
    \Drupal::logger('dh_certificate')->error(
      'Installation failed: @error', ['@error' => $e->getMessage()]
    );
    throw $e;
  }
}

/**
 * Implements hook_uninstall().
 */
function dh_certificate_uninstall() {
  $database = \Drupal::database();
  $schema = $database->schema();
  $logger = \Drupal::logger('dh_certificate');

  try {
    $logger->notice('Starting uninstall process');
    
    // List all tables before cleanup
    $tables_before = $database->query("SHOW TABLES LIKE '%course%'")->fetchCol();
    $logger->debug('Tables before cleanup: @tables', ['@tables' => implode(', ', $tables_before)]);

    // Drop any entities that might try to query these tables during uninstall
    $entity_types = [
      'course_enrollment',
      'dh_certificate_progress',
      'student_progress',
    ];
    
    foreach ($entity_types as $entity_type) {
      try {
        $logger->debug('Processing entity type: @type', ['@type' => $entity_type]);
        if (\Drupal::entityTypeManager()->hasDefinition($entity_type)) {
          \Drupal::entityTypeManager()->getStorage($entity_type)->delete([]);
          $logger->notice('Successfully cleaned up @type entities', ['@type' => $entity_type]);
        }
      }
      catch (\Exception $e) {
        $logger->warning('Failed to cleanup @type entities: @error', [
          '@type' => $entity_type,
          '@error' => $e->getMessage(),
        ]);
      }
    }

    // Now drop the tables directly
    $database->query('SET FOREIGN_KEY_CHECKS = 0');
    
    $tables = [
      'course_enrollment',
      'dh_certificate_enrollments',
      'dh_certificate_progress',
      'student_progress',
    ];

    foreach ($tables as $table) {
      try {
        $database->query("DROP TABLE IF EXISTS {" . $table . "}");
      }
      catch (\Exception $e) {
        \Drupal::logger('dh_certificate')->notice('Failed to drop @table: @error', [
          '@table' => $table,
          '@error' => $e->getMessage(),
        ]);
      }
    }

    // Clean up state and config
    \Drupal::state()->deleteMultiple([
      'dh_certificate.progress',
      'dh_certificate.completion_deadline',
      'dh_certificate.last_sync',
    ]);

    // Delete all related config
    $config_factory = \Drupal::configFactory();
    $configs = $config_factory->listAll('dh_certificate');
    foreach ($configs as $config_name) {
      $config_factory->getEditable($config_name)->delete();
    }

    // List all tables after cleanup
    $tables_after = $database->query("SHOW TABLES LIKE '%course%'")->fetchCol();
    $logger->debug('Tables after cleanup: @tables', ['@tables' => implode(', ', $tables_after)]);
    
    $logger->notice('Uninstall process completed successfully');
  }
  catch (\Exception $e) {
    $logger->error('Uninstall failed: @error', ['@error' => $e->getMessage()]);
    throw $e;
  }
}

/**
 * Implements hook_requirements().
 */
function dh_certificate_requirements($phase) {
  if ($phase !== 'runtime') {
    return [];
  }

  $requirements = [];
  $fields = \Drupal::service('entity_field.manager')
    ->getFieldDefinitions('node', 'course');

  // Check required fields
  $required = [
    'field_course_code' => 'string',
    'field_credits' => 'integer',
    'field_course_status' => 'list_string',
  ];

  foreach ($required as $field => $type) {
    if (!isset($fields[$field]) || $fields[$field]->getType() !== $type) {
      $requirements['dh_certificate_' . $field] = [
        'title' => t('Certificate Course Field'),
        'description' => t('Field @field is missing or has wrong type', ['@field' => $field]),
        'severity' => REQUIREMENT_WARNING,
      ];
    }
  }

  return $requirements;
}

/**
 * Ensures course_enrollment table exists.
 */
function dh_certificate_update_8001() {
  $schema = \Drupal::database()->schema();
  if (!$schema->tableExists('course_enrollment')) {
    $schema->createTable('course_enrollment', dh_certificate_schema()['course_enrollment']);
  }
}

/**
 * Migrate data from old table if it exists.
 */
function dh_certificate_update_9001() {
  $schema = \Drupal::database()->schema();
  if ($schema->tableExists('dh_certificate_enrollments')) {
    // Migrate data from old table if it exists
    \Drupal::database()->query("INSERT INTO {course_enrollment} SELECT * FROM {dh_certificate_enrollments}");
    // Drop old table
    $schema->dropTable('dh_certificate_enrollments');
  }
}

/**
 * Add enrolled_date field to course_enrollment table if missing.
 */
function dh_certificate_update_9002() {
  $schema = \Drupal::database()->schema();
  if ($schema->tableExists('course_enrollment')) {
    $spec = [
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
      'description' => 'The Unix timestamp when the enrollment was created.',
    ];
    if (!$schema->fieldExists('course_enrollment', 'enrolled_date')) {
      $schema->addField('course_enrollment', 'enrolled_date', $spec);
      // Set existing records to current time
      \Drupal::database()->update('course_enrollment')
        ->fields(['enrolled_date' => \Drupal::time()->getRequestTime()])
        ->execute();
    }
  }
}