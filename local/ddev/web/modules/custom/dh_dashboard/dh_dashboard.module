<?php

/**
 * @file
 * Primary module hooks for DH Dashboard module.
 */

/**
 * Implements hook_help().
 */
function dh_dashboard_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.dh_dashboard':
      return '<p>' . t('Provides Digital Humanities Dashboard blocks and functionality.') . '</p>';
  }
}

// Debug configuration settings if show_debug is enabled
$config = \Drupal::config('dh_dashboard.settings');
if (($config->get('show_debug') ?: false) && function_exists('kint')) {
    kint('Dashboard Configuration (' . __FILE__ . ':' . __LINE__ . ')', $config->get());
}

/**
 * Implements hook_theme().
 */
function dh_dashboard_theme($existing, $type, $theme, $path)
{
    $module_path = \Drupal::service('extension.list.module')->getPath('dh_dashboard');
  
    $themes = [
    'dh_content_grid' => [
      'variables' => [
        'items' => [],
        'type' => 'news', // or 'events'
        'show_debug' => false,
        'attributes' => [],
      ],
      'template' => 'dh-content-grid',
    ],
    'dh_dashboard_news' => [
      'variables' => [
        'news' => [],
        'show_debug' => false,
        'attributes' => [],
        'items_per_page' => NULL,  // Add this explicitly
        'pager_data' => [], // Explicitly declare pager_data
        'block_id' => NULL,
      ],
      'template' => 'dh-dashboard-news',
      'path' => $path . '/templates',
    ],
    'dh_dashboard_certificate_info' => [
      'variables' => [
        'info' => [],
        'attributes' => [],
      ],
      'template' => 'block--dh-dashboard-certificate-info',
    ],
    'dh_dashboard_page' => [
      'variables' => [
        'content' => null,
        'debug' => null,
        'admin_links' => null,
      ],
      'template' => 'dh-dashboard-page',
    ],
    'node__dh_dashboard__default' => [
      'template' => 'node--dh-dashboard--default',
      'base hook' => 'node',
      'path' => $path . '/templates',
    ],
    'dh_dashboard_program_info' => [
      'variables' => [
        'program_info' => [],
        'attributes' => [],
        'show_debug' => FALSE,
      ],
    ],
    'dh_dashboard_user_card' => [
      'variables' => [
        'user' => null,
        'show_debug' => false,
        'edit_url' => null,
        'attributes' => [],
      ],
    ],
    'dh_dashboard_block_usage' => [
      'variables' => [
        'usage' => [],
      ],
      'template' => 'dh-dashboard-block-usage',
    ],
    'dh_dashboard_events' => [
      'variables' => [
        'items' => [],         // Changed from NULL to []
        'attributes' => [],    // Changed from NULL to []
        'show_debug' => FALSE,
        'items_per_page' => 3,  // Add this explicitly
        'pager_data' => [], // Changed from NULL to [] to ensure it's always set
        'block_id' => NULL, // Add block_id to template variables
      ],
      'template' => 'dh-dashboard-events',
      'path' => $module_path . '/templates',   // Corrected path
    ],
    'dh_dashboard_pager' => [
      'variables' => [
        'total' => 0,
        'per_page' => 3,
        'attributes' => [],
      ],
      'template' => 'dh-dashboard-pager',
      'path' => $module_path . '/templates',
    ],
    'dh_dashboard_news_block' => [
      'variables' => [
        'items' => [],
        'pager_data' => [],  // Make sure this is included
      ],
    ],
    'dh_dashboard_pager' => [
      'variables' => [
        'pager_data' => [],
      ],
    ],
    ];
  
    // Debug point 6: Log theme registration
    \Drupal::logger('dh_dashboard')->debug('Theme registration: <pre>@themes</pre>', [
      '@themes' => print_r($themes, TRUE)
    ]);
  
    return $themes;
}

/**
 * Implements hook_preprocess_node().
 */
function dh_dashboard_preprocess_node(&$variables)
{
    if (!isset($variables['node']) || !$variables['node'] instanceof \Drupal\node\NodeInterface) {
        return;
    }

    if ($variables['node']->getType() === 'dh_dashboard') {
        $variables['display_submitted'] = false;
        $variables['page'] = true;
        unset($variables['author_picture'], $variables['submitted']);
    }
}

/**
 * Implements hook_preprocess_HOOK() for block templates.
 */
function dh_dashboard_preprocess_block(&$variables) {
  if (strpos($variables['plugin_id'], 'dh_dashboard_') === 0) {
    $variables['#attached']['library'][] = 'dh_dashboard/dashboard';
    
    // Get configuration
    $config = \Drupal::config('dh_dashboard.settings');
    $default_items_per_page = $config->get('default_items_per_page') ?? 3;
    $block_settings = $config->get('blocks.events') ?: [];
    
    // Set items per page from block settings or fall back to default
    $variables['content']['#items_per_page'] = $block_settings['items_per_page'] ?? $default_items_per_page;

    // Debug the values being used
    if ($config->get('show_debug')) {
      \Drupal::logger('dh_dashboard')->debug('Block settings: @settings', [
        '@settings' => print_r([
          'default_items_per_page' => $default_items_per_page,
          'block_settings' => $block_settings,
          'final_items_per_page' => $variables['content']['#items_per_page'],
        ], TRUE)
      ]);
    }
  }

  // Add memory usage debugging
  if (\Drupal::config('dh_dashboard.settings')->get('show_debug')) {
    \Drupal::logger('dh_dashboard')->debug('Memory usage: @memory MB', [
      '@memory' => round(memory_get_usage() / 1024 / 1024, 2)
    ]);
  }

  // Implement chunk processing for large datasets
  if (isset($variables['elements']['content']['#items']) && is_array($variables['elements']['content']['#items'])) {
    $chunk_size = 50; // Process 50 items at a time
    $items = $variables['elements']['content']['#items'];
    
    // Clear the original array to free memory
    $variables['elements']['content']['#items'] = [];
    
    // Process in chunks
    foreach (array_chunk($items, $chunk_size) as $chunk) {
      foreach ($chunk as $item) {
        $variables['elements']['content']['#items'][] = $item;
      }
      // Clear memory after each chunk
      gc_collect_cycles();
    }
  }

  // Optimize memory usage debugging
  if (\Drupal::config('dh_dashboard.settings')->get('show_debug')) {
    \Drupal::logger('dh_dashboard')->debug('Block processing: @data', [
        '@data' => json_encode([
            'memory_usage' => round(memory_get_usage() / 1024 / 1024, 2) . 'MB',
            'block_type' => $variables['plugin_id'] ?? 'unknown',
        ])
    ]);
  }
}

/**
 * Implements hook_preprocess_HOOK() for dh_dashboard_page templates.
 */
function dh_dashboard_preprocess_dh_dashboard_page(&$variables)
{
    // Initialize drupalSettings array first
    if (!isset($variables['#attached']['drupalSettings']['dhDashboard'])) {
        $variables['#attached']['drupalSettings']['dhDashboard'] = [];
    }

    // Get configuration and use consistent naming
    $config = \Drupal::config('dh_dashboard.settings');
    $show_debug = $config->get('show_debug') ?: false;
    $news_items_per_page = (int) ($config->get('news_items_per_page') ?: 3);
    
    // Set the values
    $variables['show_debug'] = $show_debug;
    $variables['#attached']['drupalSettings']['dhDashboard']['news_items_per_page'] = $news_items_per_page;
    
    // Handle user data
    $current_user = \Drupal::currentUser();
    $user = \Drupal\user\Entity\User::load($current_user->id());
    
    // Check if the Profile module is enabled and the user has a profile
    if (\Drupal::moduleHandler()->moduleExists('profile')) {
        $profile = \Drupal::entityTypeManager()->getStorage('profile')->loadByUser($user, 'dhcert');
        if ($profile && $profile->hasField('field_full_name') && !$profile->get('field_full_name')->isEmpty()) {
            $full_name = $profile->get('field_full_name')->value;
        } else {
            $full_name = $user->getDisplayName();
        }

        $profile_data = $profile ? $profile->toArray() : null;
        $profile_id = $profile ? $profile->id() : null;

        // Load the video URL and thumbnail URL from the media entity
        $video_url = null;
        $video_thumbnail_url = null;
        if ($profile && $profile->hasField('field_personal_statement_video') && !$profile->get('field_personal_statement_video')->isEmpty()) {
            $video_target_id = $profile->get('field_personal_statement_video')->target_id;
            $video_entity = \Drupal::entityTypeManager()->getStorage('media')->load($video_target_id);

            if ($video_entity && $video_entity->hasField('field_media_video_file')) {
                $file = $video_entity->get('field_media_video_file')->entity;
                if ($file) {
                    $video_url = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
                }
            }

            if ($video_entity && $video_entity->hasField('thumbnail')) {
                $thumbnail_target_id = $video_entity->get('thumbnail')->target_id;
                $thumbnail_file = \Drupal::entityTypeManager()->getStorage('file')->load($thumbnail_target_id);
                if ($thumbnail_file) {
                    $video_thumbnail_url = \Drupal::service('file_url_generator')->generateAbsoluteString($thumbnail_file->getFileUri());
                }
            }
        }
    } else {
        $full_name = $user->getDisplayName();
        $profile_data = null;
        $profile_id = null;
    }

    $variables['user'] = [
        'id' => $user->id(),
        'name' => $user->getAccountName(),
        'full_name' => $full_name,
        'profile' => $profile_data,
        'profile_id' => $profile_id,
        'video_url' => $video_url,
        'video_thumbnail_url' => $video_thumbnail_url,
    ];

    // Set drupalSettings
    if (!isset($variables['#attached']['drupalSettings']['dhDashboard'])) {
        $variables['#attached']['drupalSettings']['dhDashboard'] = [];
    }
    
    // Set news_items_per_page
    $variables['#attached']['drupalSettings']['dhDashboard']['news_items_per_page'] = $config->get('news_items_per_page') ?: 3;

    // Create the user card render array
    $variables['user_card'] = [
      '#theme' => 'dh_dashboard_user_card',
      '#user' => $variables['user'],
      '#show_debug' => $variables['show_debug'],
      '#edit_url' => $profile_id ? "/user/{$user->id()}/dhcert" : null,
      '#attributes' => new \Drupal\Core\Template\Attribute(),
    ];
}

/**
 * Implements hook_preprocess_HOOK() for dh-dashboard-events templates.
 */
function dh_dashboard_preprocess_dh_dashboard_events(&$variables) {
  // Ensure pager_data is properly set
  if (empty($variables['pager_data']) && isset($variables['#pager_data'])) {
    $variables['pager_data'] = $variables['#pager_data'];
  }

  // Debug info only if both module and template debugging are enabled
  $config = \Drupal::config('dh_dashboard.settings');
  if (!empty($variables['show_debug']) && $config->get('show_debug')) {
    \Drupal::messenger()->addStatus('Events template variables: ' . print_r([
      'items_count' => isset($variables['items']['items']) ? count($variables['items']['items']) : 0,
      'pager_data' => $variables['pager_data'],
    ], TRUE));
  }
}

/**
 * Implements hook_preprocess_HOOK() for dh-dashboard-news templates.
 */
function dh_dashboard_preprocess_dh_dashboard_news(&$variables) {
  // Ensure pager_data is properly passed from build array
  if (empty($variables['pager_data']) && !empty($variables['elements']['#pager_data'])) {
    $variables['pager_data'] = $variables['elements']['#pager_data'];
  }

  // Debug info only if both module and template debugging are enabled
  $config = \Drupal::config('dh_dashboard.settings');
  if (!empty($variables['show_debug']) && $config->get('show_debug')) {
    \Drupal::messenger()->addStatus('News template variables: ' . print_r([
      'has_pager_data' => isset($variables['pager_data']),
      'pager_data' => $variables['pager_data'] ?? 'not set',
    ], TRUE));
  }
}

/**
 * Implements hook_form_alter().
 */
function dh_dashboard_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id === 'dh_dashboard_settings') {
    $form['#validate'][] = 'dh_dashboard_settings_form_validate';
    $form['#submit'][] = 'dh_dashboard_settings_form_submit';
  }
}

/**
 * Additional validation for the settings form.
 */
function dh_dashboard_settings_form_validate($form, &$form_state) {
  \Drupal::logger('dh_dashboard')->debug('Additional validation running');
}

/**
 * Additional submit handler for the settings form.
 */
function dh_dashboard_settings_form_submit($form, &$form_state) {
  \Drupal::logger('dh_dashboard')->debug('Additional submit running');
  drupal_flush_all_caches();
}

/**
 * Helper function to get paginated items.
 */
function dh_dashboard_get_paginated_items($query, $page = 0, $items_per_page = 10) {
  // Set a reasonable limit
  $query->range($page * $items_per_page, $items_per_page);
  
  // Execute query with pagination
  try {
    $result = $query->execute();
    return $result;
  }
  catch (\Exception $e) {
    \Drupal::logger('dh_dashboard')->error('Query execution error: @message', ['@message' => $e->getMessage()]);
    return [];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dh_dashboard_preprocess_dh_dashboard_pager(&$variables) {
  if (!isset($variables['pager_data'])) {
    $variables['pager_data'] = [];
  }
  
  // Get the block ID from the parent build array
  if (empty($variables['pager_data']['block_id']) && !empty($variables['elements']['#block_id'])) {
    $variables['pager_data']['block_id'] = $variables['elements']['#block_id'];
  }
  
  // Debug output
  if (\Drupal::config('dh_dashboard.settings')->get('show_debug')) {
    \Drupal::messenger()->addStatus('Pager preprocessed data: ' . print_r([
      'block_id' => $variables['pager_data']['block_id'] ?? 'not set',
      'elements' => array_keys($variables['elements']),
    ], TRUE));
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function dh_dashboard_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook == 'pager' && !empty($variables['parameters']['block_type'])) {
    $suggestions[] = 'dh_dashboard_pager';
  }
}

/**
 * Implements hook_preprocess_page().
 */
function dh_dashboard_preprocess_page(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  
  // Check if we're on the dashboard page
  if ($route_name === 'dh_dashboard.dashboard') {
    // Attach our event preview library
    $variables['#attached']['library'][] = 'dh_dashboard/event_preview';
    
    // Add debug info
    if (\Drupal::config('dh_dashboard.settings')->get('show_debug')) {
      \Drupal::messenger()->addStatus('Event preview library attached to dashboard page');
    }
  }
}

