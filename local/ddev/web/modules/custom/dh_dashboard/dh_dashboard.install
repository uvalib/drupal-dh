<?php

use Drupal\layout_builder\Section;
use Drupal\layout_builder\SectionComponent;

/**
 * @file
 * Install, update and uninstall functions for the DH Dashboard module.
 */

/**
 * Implements hook_install().
 */
function dh_dashboard_install() {
  // Force configuration import from install directory
  \Drupal::service('config.installer')->installDefaultConfig('module', 'dh_dashboard');

  // Handle permissions
  $permissions = [
    'authenticated' => ['access dh dashboard'],
    'administrator' => ['access dh dashboard', 'access dh admin dashboard'],
  ];
  
  foreach ($permissions as $role_id => $role_permissions) {
    $role = \Drupal\user\Entity\Role::load($role_id);
    if ($role) {
      foreach ($role_permissions as $permission) {
        $role->grantPermission($permission);
      }
      $role->save();
    }
  }

  // Create the default dashboard
  $storage = \Drupal::entityTypeManager()->getStorage('node');
  $nodes = $storage->loadByProperties([
    'type' => 'dh_dashboard',
    'title' => 'Default Dashboard',
  ]);
  
  if (empty($nodes)) {
    $node = $storage->create([
      'type' => 'dh_dashboard',
      'title' => 'Default Dashboard',
      'status' => 1,
    ]);
    $node->save();
    
    // Set the dashboard node ID in configuration
    $config = \Drupal::configFactory()->getEditable('dh_dashboard.settings');
    $config
      ->set('dashboard_node', $node->id())
      ->set('items_per_page', 4)
      ->set('show_debug', TRUE)
      ->save();
  } else {
    // Ensure default configuration exists
    $config = \Drupal::configFactory()->getEditable('dh_dashboard.settings');
    if (!$config->get('items_per_page')) {
      $config
        ->set('items_per_page', 4)
        ->set('show_debug', TRUE)
        ->save();
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function dh_dashboard_uninstall() {
  // First, delete any remaining dashboard nodes
  $storage = \Drupal::entityTypeManager()->getStorage('node');
  $nodes = $storage->loadByProperties(['type' => 'dh_dashboard']);
  $storage->delete($nodes);

  // Delete in correct order: fields first, then other configs
  $configs_to_delete = [
    'core.entity_view_display.node.dh_dashboard.default',
    'core.entity_form_display.node.dh_dashboard.default',
    'node.type.dh_dashboard',
  ];
  
  // Use config factory to properly delete configurations
  $config_factory = \Drupal::configFactory();
  foreach ($configs_to_delete as $config_name) {
    $config = $config_factory->getEditable($config_name);
    if ($config && !$config->isNew()) {
      $config->delete();
    }
  }

  // Clear field cache to ensure clean state
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();

  // Clean up permissions
  $roles = \Drupal\user\Entity\Role::loadMultiple();
  foreach ($roles as $role) {
    $role->revokePermission('access dh dashboard');
    $role->save();
  }

  // Delete the base field override configuration that might conflict on reinstall
  \Drupal::configFactory()->getEditable('core.base_field_override.node.dh_dashboard.title')->delete();

  // Clean up the body field instance for dh_dashboard content type
  $field_instance = \Drupal::entityTypeManager()
    ->getStorage('field_config')
    ->load('node.dh_dashboard.body');
  if ($field_instance) {
    $field_instance->delete();
  }

  // Delete the content type itself
  $content_type = \Drupal::entityTypeManager()
    ->getStorage('node_type')
    ->load('dh_dashboard');
  if ($content_type) {
    $content_type->delete();
  }
}