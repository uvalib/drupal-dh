<?php

use Drupal\layout_builder\Section;
use Drupal\layout_builder\SectionComponent;
use Drupal\Core\Config\FileStorage;
use Drupal\Core\Extension\ExtensionPathResolver;

/**
 * @file
 * Install, update and uninstall functions for the DH Dashboard module.
 */

/**
 * Get a list of all configuration objects owned by this module.
 */
function _dh_dashboard_config_objects() {
  return [
    'dh_dashboard.settings',
    'block.block.dh_dashboard_news',
    'block.block.dh_dashboard_events',
    'block.block.dh_dashboard_certificate_info',
    'views.view.dh_dashboard_news',
    'views.view.dh_dashboard_events',
    'core.base_field_override.node.dh_dashboard.title',
    'core.entity_form_display.node.dh_dashboard.default',
    'core.entity_view_display.node.dh_dashboard.default',
    'field.field.node.dh_dashboard.body',
    'node.type.dh_dashboard',
    // Add any other config objects here
  ];
}

/**
 * Implements hook_install().
 */
function dh_dashboard_install() {
  // Delete any existing configurations first
  $config_factory = \Drupal::configFactory();
  $config_storage = \Drupal::service('config.storage');
  
  // Get module path using the extension path resolver
  $module_path = \Drupal::service('extension.path.resolver')->getPath('module', 'dh_dashboard');
  $install_storage = new FileStorage($module_path . '/config/install');
  
  // Get list of configs to install
  $configs_to_install = $install_storage->listAll();
  
  // Check and delete existing configurations
  foreach ($configs_to_install as $config_name) {
    if ($config_storage->exists($config_name)) {
      $config_factory->getEditable($config_name)->delete();
    }
  }

  // Install fresh configuration
  \Drupal::service('config.installer')->installDefaultConfig('module', 'dh_dashboard');
  
  // Create default dashboard
  _dh_dashboard_create_default();
  
  // Clear all caches
  drupal_flush_all_caches();
}

/**
 * Creates the default dashboard node.
 */
function _dh_dashboard_create_default() {
  $storage = \Drupal::entityTypeManager()->getStorage('node');
  
  // Check if dashboard already exists
  $query = $storage->getQuery()
    ->condition('type', 'dh_dashboard')
    ->condition('title', 'Dashboard')
    ->accessCheck(FALSE);
  $nids = $query->execute();
  
  if (empty($nids)) {
    // Create new dashboard node
    $node = $storage->create([
      'type' => 'dh_dashboard',
      'title' => 'Dashboard',
      'status' => 1,
      'uid' => 1, // Admin user
    ]);
    $node->save();
    
    // Set as default dashboard in configuration
    \Drupal::configFactory()
      ->getEditable('dh_dashboard.settings')
      ->set('default_dashboard', $node->id())
      ->save();
  }
}

/**
 * Implements hook_uninstall().
 */
function dh_dashboard_uninstall() {
  // Remove all module configuration
  $config_factory = \Drupal::configFactory();
  foreach (_dh_dashboard_config_objects() as $config_name) {
    $config_factory->getEditable($config_name)->delete();
  }
  
  // Clear all caches
  drupal_flush_all_caches();
}

/**
 * Implements hook_schema().
 */
function dh_dashboard_schema() {
  $schema['dashboard_item'] = [
    'description' => 'Stores dashboard items.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key',
      ],
      'uuid' => [
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ],
      'type' => [
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'description' => 'Type of dashboard item',
      ],
      'title' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'description' => [
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      ],
      'date' => [
        'type' => 'varchar',
        'mysql_type' => 'datetime',
        'not null' => FALSE,
      ],
      'link__uri' => [
        'type' => 'varchar',
        'length' => 2048,
        'not null' => FALSE,
      ],
      'link__title' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'type' => ['type'],
      'date' => ['date'],
    ],
  ];

  return $schema;
}